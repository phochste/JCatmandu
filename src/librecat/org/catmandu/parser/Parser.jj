PARSER_BEGIN(Parser)
    package librecat.org.catmandu.parser;

    import librecat.org.catmandu.Fixable;
    import librecat.org.catmandu.Util;
    import java.util.List;
    import java.util.ArrayList;

    public class Parser {
        
        public static List parse(java.io.Reader reader) throws ParseException, TokenMgrError {
            return new Parser(reader).Expression();
        }
    }
PARSER_END(Parser)

SKIP:  { 
    " "  | 
    "\t" | 
    "\n" | 
    "\r" |
    "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
  < DO: "do" >
| < DOSET: "doset" >
| < END: "end">
| < ELSE: "else">
| < IF: "if" > 
| < UNLESS: "unless">
}

TOKEN : 
{
  < NAME: ["a" - "z"] <NAME_REST> >
| < #NAME_REST: ([ "_" , "0" - "9" , "a" - "z" , "A" - "Z"])* >

| < S_ARG: <QQ_STRING> | <Q_STRING> >
| < L_ARG: <INT> | <BARE_STRING> >

| < #INT: <DIGITS> | "-" <DIGITS> >
| < #DIGITS: (["0" - "9"])* >

| < #QQ_STRING: "\"" <QQ_CHARS> "\"" >
| < #QQ_CHARS: (<QQ_CHAR>)* >
| < #QQ_CHAR:    
         ~["\""]                   // non-quote     = self
       | "\\" ["r", "n", "\""]     // escaped char  = CR | LF | quote
       | "\"" "\""                 // doubled-quote = quote 
  >

| < #Q_STRING: "'" <Q_CHARS> "'" >
| < #Q_CHARS: (<Q_CHAR>)* >
| < #Q_CHAR:    
         ~["'"]                   // non-quote     = self
       | "\\" ["r", "n", "'"]     // escaped char  = CR | LF | quote
       | "'" "'"                  // doubled-quote = quote 
  >

| < BARE_STRING: [ "a" - "z", "A" - "Z" ] ([ "_" , "0" - "9" , "a" - "z" , "A" - "Z"])* >

}

/** Root production. */
List Expression() :
{
    Fixable s;
    List fixes;
}
{
  {
    fixes = new ArrayList();
  }
  ( s=FixExpression()
	{
	  fixes.add(s);
	}
  )*
   
  <EOF>
  {
    return fixes;
  }
}

Fixable FixExpression() :
{
    Token t;
    String s;
}
{
  t=<NAME> "(" s=StringArgument() ")" 
  { return Util.createFixer(t.image,s); }
}

String StringArgument() :
{
    Token s;
}
{
    s=<S_ARG>
    {
        return s.image.substring(1,s.image.length() - 1 );
    }
  | 
    s=<L_ARG>
    {
        return "" + s.image;
    }
}